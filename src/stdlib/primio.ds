using System;

/// <summary>
/// The IO monad type.
/// </summary>
public class IOMonad<T>
{
    public this(T() Action)
    {
        this.Action = Action;
    }

    public T() Action;
}

/// <summary>
/// The "Unit" singleton class.
/// </summary>
public static class Unit
{ }

public class WriteLineClosure
{
    public this(set string contents);

    private string contents;

    public Unit WriteLine()
    {
        Console.WriteLine(contents);
        return Unit;
    }
}

public class BindClosure<T1, T2>
{
    public this(set IOMonad<T1> monad, set IOMonad<T2>(T1) binder);

    /// <summary>
    /// This bind closure's inner monad.
    /// </summary>
    private IOMonad<T1> monad;
    /// <summary>
    /// The bind function.
    /// </summary>
    private IOMonad<T2>(T1) binder;

    /// <summary>
    /// Performs the action contained in the field monad first, then
    /// applies the function to the result. After that, the monad that
    /// the function returns is itself evaluated.
    /// </summary>
    public T2 Perform()
    {
        return binder(monad.Action()).Action();
    }
}

public module primio
{
    public static T performIO<T>(IOMonad<T> Monad)
    {
        return Monad.Action();
    }

    public IOMonad<string> readLineIO()
    {
        return new IOMonad<string>(Console.ReadLine);
    }

    private Unit PerformWriteLine(string Contents)
    {
        Console.WriteLine(Contents);
        return Unit;
    }

    public IOMonad<Unit> writeLineIO(string Contents)
    {
        return new IOMonad<Unit>(new WriteLineClosure(Contents).WriteLine);
    }

    public IOMonad<T2> bindIO<T1, T2>(IOMonad<T1> Monad, IOMonad<T2>(T1) Function)
    {
        return new IOMonad<T2>(new BindClosure<T1, T2>(Monad, Function).Perform);
    }

    public IOMonad<T> returnIO<T>(T Value)
    {
        return new IOMonad<T>(T() => Value);
    }

    public IOMonad<T> failIO<T>(string ErrorMessage)
    {
        return new IOMonad<T>(T() =>
        {
            throw new Exception(ErrorMessage);
        });
    }
}
